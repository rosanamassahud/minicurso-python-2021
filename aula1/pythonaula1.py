# -*- coding: utf-8 -*-
"""pythonAula1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17zpN_W0nZytvPLYc2baFGTgPUdsLIjiX

# **Comandos de saída**
"""

print("Alo mundo!\n Nossa primeira aula em Python")

help(print)

print('O Brasil', 'ganhou', 5, 'títulos mundiais', sep='-', end='!')
print('Teste de quebra de linha')

"""# **Variáveis**

"""

nome = 'Toni Luiz'
idade = 18
print(nome, 'tem', idade, 'anos')

print(type(idade))
print(type(nome))

idade = 17.5
print(type(idade))

"""# Tipos de Dados
                             - Inteiros: números sem casa decimal: 10, 5, -4
                           /
             - Numéricos - - Reais: números com casa decima: 3.14, 75.18, 0.0
           /               \
          /                  - Complex: parte real e parte imaginária (j)
- Dados - 
          \                      - Lógicos: True ou False
           \                   /
             - Não numéricos - 
                               \
                                 - Texto (cadeia de caracteres): "Python", "José Maria da Silva", "34567-890"
                                 
O Python possui tipos primitivos para cada um desses tipos de dados. São eles o int, float, bool e o str.

A tipagem do Python é dinâmica!

# **Tipos de dados numéricos** (int, float, complex)
"""

x = 35e3 #float
y = 12E4
z = -87.7e-2
k = 2.5e100
print(x)
print(y)
print(z)
print(k)
a = 2
print(a, type(a))
x = 3.5-5j #3.5 -5i
print(x, type(x))

"""# **Casting**



"""

print(idade)
print(type(idade))
print(int(idade))
print(type(idade))
idade = int(idade)
print(type(idade))
num=2
print(num, type(num))
num=float(num)
print(num, type(num))

a = 2.5
print(a, type(a))
b = complex(a)
print(b, type(b))
c = str(a)
print(c, type(c))
s = '3'
print(s, type(s))
x = int(s)
print(x, type(x))

"""# **Strings**"""

str = 'Strings são arrays'
print(str)

a = '''Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua.'''
print(a)

print(str[0], str[1], str[4])

print(str[2:6])

print(str.lower())
print(str.upper())
print(str.capitalize())
print(str.title())

str = '  Hello, World! '
print(str)
print(str.strip())

idade = 18
nome = 'Toni Luiz'
print(nome, 'tem', idade, 'anos!')
print('{} tem {} anos!'.format(nome, idade))
frase = '{} tem {} anos!'
print(frase.format(nome, idade))

print(f'{nome} tem {idade} anos!')

"""# Entrada de Dados
A partir do Python 3.6 temos o comando input

Em versões anteriores, tínhamos o comando raw_input
"""

nome = input('Entre com o seu nome: ')
print('Olá {}, seja bem vindo!'.format(nome))

peso = float(input('Qual o seu peso? '))
altura = float(input('Qual sua altura? '))
imc = peso/(altura*altura)
print('Seu IMC é {}'.format(imc))

"""# OPERADORES

# Operadores aritméticos

| Operador | Significado   | Exemplo                    |
|:---|:---|:---|
|     +    | Adição        | a = 3 + 2                  |
|     -    | Subtração     | b = 7 - a                  |
|     *    | Multiplicação | c = a * b                  |
|     /    | Divisão       | d = 10/3                   |
|    //    | Quociente     | e = 10//3                  |
|     %    | Resto         | f = 10%3                   |
|    **    | Exponenciação | g = 2 ** 3                 |
|    **    | Radiciação    | h = 16 ** (1/2)            |
"""

x = 5
y = 2

a = x + y
b = x - y
c = x * y
d = x / y
e = x // y
f = x % y
g = x ** y
h = g ** 0.5

print('a = {}\nb = {}\nc = {}\nd = {}\ne = {}\nf = {}\ng = {}\nh = {}'.format(a,b,c,d,e,f,g,h))

"""# Booleanos, Operadores relacionais

| Operador | Significado   | Exemplo                    |
|:---|:---|:---|
| == | Igualdade | a == b |
| != | DesiIgualdade | a != b |
| > | Maior que | a > b |
| < | Menor que | a < b |
| >= | Maior ou igual | a >= b |
| <= | Menor ou igual | a <= b |
"""

a = x > y
b = x < y
c = x == y
d = x != y
print('a = {}\nb = {}\nc = {}\nd = {}'.format(a,b,c,d))

"""# Operadores lógicos (conectivos lógicos)

| Operador | Significado   | Exemplo                    |
|:---|:---|:---|
| and | **E** lógico | a == b and b == c |
| or | **OU** lógico | a == b or b == c |
| ^ | **OU** exclusivo (XOR) | a == b ^ b == c |
| not | Negação (inverte o resultado lógico) | not(a == b and b == c) |

### Tabela verdade (AND)

| a | b | a and b |
|:--:|:--:|:--:|
| True  | True  | **True** |
| True  | False | False |
| False | True  | False |
| False | False | False |

| a | b | c | a and b and c |
|:--:|:--:|:--:|:--:|
| True  | True  | True  | **True** |
| True  | True  | False | False |
| True  | False | True  | False |
| True  | False | False | False |
| False | True  | True  | False |
| False | True  | False | False |
| False | False | True  | False |
| False | False | False | False |

### Tabela verdade (OR)

| a | b | a and b |
|:--:|:--:|:--:|
| True  | True  | **True** |
| True  | False | **True** |
| False | True  | **True** |
| False | False | False |

### Tabela verdade (XOR)

| a | b | a ^ b |
|:--:|:--:|:--:|
| True  | True  | False |
| True  | False | **True** |
| False | True  | **True** |
| False | False | False |

### Tabela verdade (NOT)
| a | not(a) |
|:--:|:--:|
| True  | False |
| False | **True** |
"""

# TABELA DO AND (com 2 booleanos)
print(" x     | y     | x and y ")
print("-------------------------")
print(" True  | True  |", True and True )
print(" True  | False |", True and False )
print(" False | True  |", False and True)
print(" False | False |", False and False)

# TABELA DO AND (com 3 booleanos)
print(" x     | y     | z     |  x and y and z ")
print("----------------------------------------")
print(" True  | True  | True  |",True and True and True)
print(" True  | True  | False |",True and True and False)
print(" True  | False | True  |",True and False and True)
print(" True  | False | False |",True and False and False)
print(" False | True  | True  |",False and True and True)
print(" False | True  | False |",False and True and False)
print(" False | False | True  |",False and False and True)
print(" False | False | False |",False and False and False)

# TABELA DO OR
print(" x     | y     | x or y ")
print("-------------------------")
print(" True  | True  |",True or True )
print(" True  | False |",True or False )
print(" False | True  |",False or True)
print(" False | False |",False or False)

# TABELA DO XOR (EXCLUSIVE OR)
print(" x     | y     | x ^ y ")
print("-------------------------")
print(" True  | True  |",True ^ True )
print(" True  | False |",True ^ False )
print(" False | True  |",False ^ True)
print(" False | False |",False ^ False)

# TABELA DO NOT
print(" x     | not(x) ")
print("----------------")
print(" True  |",not(True))
print(" False |",not(False))

# and, or, not,  ^
x = 5

a = x > 3
b = x > 10
r = a ^ b
print("a = {}".format(a))
print("b = {}".format(b))
print("r = {}".format(r))

print(not(r))

"""# Operadores de identidade

| Operador | Significado   | Exemplo                    |
|:---|:---|:---|
| is | Verifica se duas referências apontam para o mesmo objeto | a is b |
| is not | Verifica se duas referências apontam para diferentes objetos | a is not b |
"""

x = ["apple", "banana"]
y = ["apple", "banana"]
z = x

print(x is z)

print(x is y)

print(x == y)

"""# Condicionais - if"""

a = 33
b = 200
c = 250
if b > a: 
    print("b é maior que a") #observe a identação da linha

if (b > a and b < c):
    print('{} está entre {} e {}'.format(b,a,c))

"""# Condicionais - elif"""

a = 33
b = 33
if (b > a):
    print("b é maior que a")
elif (a == b):
    print("a e b são iguais")

"""# Condicionais - else"""

a = 200
b = 33
if (b > a):
    print("b é maior que a")
elif (a == b):
    print("a e b são iguais")
else:
    print("a é maior que b")

x = 9

if (x > 10):
    print("Acima de 10,")
    if (x > 20):
        print("e também acima de 20!")
    else:
        print("mas não acima de 20.")
else:
    print("Abaixo de 10.")

"""# LOOPS

# Repetição com while
"""

i = 1
while i < 6:
    print(i)
    i += 1

"""# interrompendo o loop com a declaração 'break'"""

i = 1
while i < 6:
    print(i)
    if i == 3:
        break
    i += 1

"""# Declaração 'continue'"""

i = 0
while (i < 6):
    i += 1
    if (i == 3):
        continue
    print(i)

"""# Declaração else (no loop!)"""

i = 1
while (i < 6):
    print(i)
    i += 1
else:
    print("i não é mais menor que 6")

"""# For loop
O comando for, em Python, é usado para iterar sobre uma sequência (lista, tupla, conjunto, dicionário ou string)
Funciona mais como um método iterador; não sendo, portanto, tão parecido com o comando for de outras linguagens de programação
"""

# breve introdução a listas em Python
thislist = ["apple", "banana", "cherry"]
print(thislist)

fruits = ["apple", "banana", "cherry"]
for x in fruits:
    print(x)

for x in "banana":
    print(x)

for x in range(6):
    print(x)

for x in range(2, 6):
    print(x)

for x in range(2, 30, 3):
    print(x)

for x in range(6):
    print(x)
else:
    print("Terminou!")

adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]

for x in adj:
    for y in fruits:
        print(x, y)

i = 0
while(i<10):
  print(i)
  i+=0.5

"""# Listas

* Lista é uma coleção de elementos 
* Cada elemento possui uma posição dentro de uma lista. Essa posição é chamada índice
* O primeiro elemento fica armazenado na posição *0*, enquanto o último elemento fica armazenado na posição *n-1* (onde *n* é a quantidade de elementos da lista)

O que veremos nessa aula:

1. Como criar uma lista
2. Como acessar elementos de uma lista
3. Como modificar elementos de uma lista
4. Principais métodos de um objeto lista
5. Funções aplicáveis a uma lista

### 1. Como criar uma lista
"""

# Criando uma lista vazia
lista_vazia = []
lista_vazia2 = list()

# Visualizando o tipo
type(lista_vazia)

# Visualizando o tipo
type(lista_vazia2)

# Verificando o tamanho da lista
len(lista_vazia)

# Criando listas com elementos
lista = [23, 56, 39, -3, 10, 2, 18, 0, 5]
lista_reais = [1.5, -2.13, 5.14]
lista_strings = ["Toni", "Python", "CEFET MG", "Engenharia Elétrica"]
lista_booleanos = [True, True, False, True]
lista_misturada = [1, 2, 3.14159, "teste"]
lista_misturada2 = [1, 2, 3.14159, "bláblá", [1, "A", 1.0]]
listas_aninhadas = [ [1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Visualizando a lista
lista

lista_reais

lista_strings

lista_booleanos

lista_misturada

lista_misturada2

listas_aninhadas

"""### 2. Como acessar elementos de uma lista"""

# Acessando o índice 0 (primeira posição)
lista[0]

lista

# Acessando o índice 2 (terceira posição)
lista[2]

# Acessando o índice 3 (quarta posição)
print(lista_strings[3])

lista_strings

# Acessando o índice 3 (quarta posição)
lista_misturada[3][2]

lista_misturada

# Acessando o índice 4 nos foi retornado uma lista com 3 elementos. Agora queremos acessar o índice 1 dessa lista interna
lista_misturada2[4][1]

lista_misturada2

# Acessando um índice inexistente
lista[20]

"""### 3. Como modificar elementos de uma lista"""

# Visualizando a lista
lista

# Alterando o elemento do índice 1 de 56 para 18
lista[1] = 18

# Visualizando a alteração realizada
lista

# Modificando o elemento do índice 3 de -3 para 15
lista[3] = 15

# Visualizando a alteração realizada
lista

# Modificando o elemento do índice 2. Ele recebe a soma dos dois elementos anteriores
lista[2] = lista[0] + lista[1]

# Visualizando a alteração realizada
lista

lista_misturada2

lista_misturada2[4][1] = 'B'

lista_misturada2

lista_misturada2[2] = True

lista_misturada2

lista_misturada3 = [1,False, -2.5, (1,2,3,4)]

lista_misturada3

type(lista_misturada3)

type(lista_misturada3[3])

lista_misturada3[3][1] = 'a' #gera um erro pois não podemos modificar o tipo tuple

"""### 4. Principais métodos de um objeto lista

Método | Descrição | Exemplo
:----- | :-------- | :------
append | Adiciona um elemento no final da lista | `lista.append(5)`
clear  | Apaga todos os elementos de uma lista | `lista.clear()`
copy | Retorna uma cópia dos elementos da lista | `copia = lista.copy()`
count | Retorna a quantidade de ocorrências de um elemento na lista | `qt = lista.count(5)`
extend | Adiciona os elementos de outra lista passada por parâmetro | `lista.extend(outra_lista)`
index | Retorna o índice do elemento passado por parâmetro (primeira posição) | `pos5 = lista.index(5)`
insert | Adiciona um elemento em uma posição passada por parâmetro (adiciona no final caso a posição não exista)| `lista.insert(3, "João")`
pop | Remove o elemento na posição passada por parâmetro (provoca um erro caso a posição não exista)| `elemento = lista.pop(3)`
remove | Remove o elemento passado por parâmetro (provoca um erro caso o elemento não exista)| `lista.remove(5)`
reverse | Inverte a ordem dos elementos de uma lista | `lista.reverse()`
sort | Ordena os objetos de uma lista | `lista.sort()`
 | | `lista.sort(reverse=True)`

#### 4.1 - append()
"""

# Visualizando a lista antes da chamada ao método append()
print(lista)
print(len(lista))

# Adicionado o 17 no final da lista
lista.append(17)

# Visualizando a lista após chamada ao método append()
print(lista)
print(len(lista))

"""#### 4.2 - clear()"""

# Visualizando lista_reais antes da chamada ao método clear()
lista_reais

# Removendo todos os elementos de lista_reais
lista_reais.clear()

# Visualizando lista_reais após chamada ao método clear()
lista_reais

"""### 4.3 - copy()"""

# Copiando uma lista para outra?
copia = lista

# Visualizando o conteúdo de copia
copia

# Alterando o elemento do índice 0 de 23 para 5
copia[0] = 5

# Visualizando o conteúdo de copia
copia

# Visualizando o conteúdo de lista (Perceba que o elemento 23 também foi alterado na lista, e não apenas em copia)
lista

# Desfazendo a alteração no índice 0, modificando de 5 para 23
lista[0] = 23
lista

# A maneira correta de copiar uma lista para outra é através da chamada ao método copy()
copia = lista.copy()

# Visualizando o conteúdo de lista
lista

# Visualizando o conteúdo de copia
copia

# Alterando o elemento do índice 0 de 23 para 5
copia[0] = 5

# Visualizando o conteúdo de lista
lista

# Visualizando o conteúdo de lista - Agora sim, apenas o índice 0 de copia foi alterado
copia

"""###4.4 - count()"""

# Verificando quantas vezes o número 5 aparece em copia
copia.count(5)

"""###4.5 - extend()"""

# Suponha que temos uma lista chamada numeros que contém os elementos [1, 2, 3]
numeros = [1, 2, 3]

# Queremos adicionar os elementos [4, 5] à lista números e usamos o método append()
numeros.append([4,5])

# Ao invés de adicionarmos os elementos 4 e 5, adicionar uma lista contendo os elementos [4, 5]
numeros

# A maneira correta de adicionar novos elementos de uma lista, a partir de outra lista, é através do método extend()
numeros = [1, 2, 3]
numeros.extend([4,5])
numeros

"""###4.6 - index()"""

# Redefinindo os elementos da lista
lista = [1, 3, 7, 2, 3, 8, 4]
lista

# O método index nos permite saber em que posição determinado elemento está armazenado
lista.index(7)

# Podemos guardar esse valor em uma variável
posicao8 = lista.index(8)

posicao8

# O método index() retorna a posição da primeira ocorrência do elemento procurado. 
posicao3 = lista.index(3)

posicao3

# Caso o elemento não exista, ocorre um erro
lista.index(19)

"""###4.7 - insert()"""

lista

# O método insert() permite adicionar um elemento em qualquer posição da lista. 
# Caso a posição não exista, ele insere o elemento desejado na última posição
lista.insert(2, "ABC")
lista

lista.insert(100, "XYZ")
lista

"""###4.8 - pop()"""

# Utilizamos o método pop() quando desejamos apagar uma posição da lista
# Removendo o elemento no índice 2
valor = lista.pop(2)
# Visualizando o valor retornado
valor

# Visualizando a lista após a remoção 
lista

# Removendo o elemento da última posição
lista.pop(-1)
# Visualizando a lista após a remoção 
lista

# O método pop() provoca um erro caso a posição não exista
lista.pop(45)

"""###4.9 - remove()"""

# Utilizamos o método remove() quando desejamos apagar um elemento específico da lista
# Visualizando lista_strings antes da remoção
lista_strings

# Removendo "Python"
lista_strings.remove("Python")

# Visualizando lista_strings após a remoção
lista_strings

# O método remove() provoca um erro caso o elemento não exista
lista_strings.remove("Java")

"""###4.10 - reverse()"""

# Redefinindo os elementos de lista
lista = [1, 2, 3, 4, 5, 6]
# Visualizando a lista antes da chamada ao método reverse()
lista

# Invertendo os elementos da lista
lista.reverse()

# Visualizando a lista após chamada ao método reverse()
lista

"""###4.11 - sort()"""

# Redefinindo os elementos de lista
lista = [6, 3, 1, 4, 2, 5]
# Visualizando a lista antes da chamada ao método sort()
lista

# Ordenando os elementos em ordem crescente
lista.sort()

# Visualizando a lista após chamada ao método sort()
lista

# Redefinindo os elementos de lista
lista = [6, 3, 1, 4, 2, 5]
# Visualizando a lista antes da chamada ao método sort()
lista

# Ordenando os elementos em ordem decrescente
lista.sort(reverse=True)

# Visualizando a lista após chamada ao método sort()
lista

# Ordenando lista de caracteres
lista_letras = ["Q", "W", "E", "R", "T", "Y", "A", "S", "D"]
lista_letras.sort()
lista_letras

# Ordenando lista de strings
lista_strings = ["GHI", "XYZ", "DEF", "ABC", "KLM"]
lista_strings.sort()
lista_strings

# Não é possível ordenar uma lista com elementos de diferentes tipos
lista_misturada = [2, "ABC", 3.14]
lista_misturada.sort()
lista_misturada

"""### 5. Funções aplicáveis a uma lista

Função | Descrição | Exemplo
:----- | :-------- | :------
len | Retorna a quantidade de elementos de uma lista | `print(len(lista))`
max  | Retorna o maior elemento de uma lista | `maior = max(lista)`
min | Retorna o menor elemento de uma lista | `menor = min(lista)`
sum | Retorna o somatório dos elementos de uma lista | `soma = sum(lista)`
"""

# Redefinindo os elementos de lista e lista_letras
lista = [8, 3, 21, 14, 2, 45]
lista_letras = ["Q", "W", "E", "R", "T", "Y", "A", "S", "D"]

print(lista)
print(lista_letras)

# A função len() retorna a quantidade de elementos de uma lista
len(lista)

# A função max() retorna o maior elemento de uma lista
max(lista)

max(lista_letras)

# A função min() retorna o menor elemento de uma lista
min(lista)

min(lista_letras)

# A função sum() retorna a soma dos elementos de uma lista numérica
sum(lista)

"""# Outras coleções em Python
### Tuple
* Assim com uma lista, uma tupla também é uma coleção de elementos. A diferença entre elas, é que a tupla é imutável. Ou seja, uma vez definidos os seus elementos, a tupla não pode mais ser alterada
* Cada elemento possui uma posição dentro de uma lista. Essa posição é chamada índice
* O primeiro elemento fica armazenado na posição *0*, enquanto o último elemento fica armazenado na posição *n-1* (onde *n* é a quantidade de elementos da lista)

### Set
* Conjuntos são coleções de elementos únicos
* Principais características:
   * Os elementos não são armazenados em uma ordem específica
   * Conjuntos não contém elementos repetidos
* Conjuntos não suportam indexação como as listas e tuplas

### Dict
* Um dicionário é uma coleção de elementos que possuem uma *chave* e um *valor*
* Ao invés de um índice, usamos a *chave* para recuperar um *valor*

### 1. Como criar tuplas
"""

# Criando tuplas vazias
tupla_vazia = () # lista_vazia = []
tupla_vazia2 = tuple()

# Verificando o tipo de tupla_vazia
type(tupla_vazia)

# Verificando se tupla_vazia2 é uma instância de tuple
isinstance(tupla_vazia2, tuple)

len(tupla_vazia)

# Criando tuplas com elementos
tupla1 = (3, 19, 4, 21, 3, 5, 13)
tupla2 = (3, 19, 4, 21, 3, 5, 13, "tupla", (1, 2, 3))
tupla3 = (3, 19, 4, 21, 3, 5, 13, "tupla", [1, 2, 3])

"""### 2. Como acessar elementos de uma tupla"""

# Visualizando os elementos de tupla1
tupla1

# Visualizando os elementos de tupla2
tupla2

# Visualizando os elementos de tupla3
tupla3

# Acessando o índice 0 (primeira posição) de tupla1
tupla1[0]

# Visualizando os elementos de tupla1
tupla1

# Acessando o índice 5 (sexta posição) de tupla2
tupla2[5]

"""### 3. Como criar conjuntos (set)"""

# Criando conjuntos vazios
conj_vazio1 = set() # Essa é a única forma de se criar um conjunto vazio
conj_vazio2 = {} # As chaves são utilizadas para construir um dicionário vazio.

type(conj_vazio1)

type(conj_vazio2)

# Criando conjuntos com elementos
conj1 = {1, 2, 3, 4, 5}
conj2 = {"A", "B", "C", "D"}
conj3 = {"ABC", 123, 3.14}

conj1

conj2

conj3

# Conjuntos não podem conter outras estruturas aninhadas
conj3 = {1, "ABC", [1,2,3]} # Provoca um erro por causa da lista

"""### 4. Como acessar elementos de um conjunto"""

conj1

# Conjuntos não suportam indexação. Então vamos precisar do comando for para acessar os elementos de um conjunto
for elem in conj1:
    print(elem)

# Tentar acessar uma posição em um conjunto provoca um erro
conj1[0]

"""### 5. Como modificar elementos de um conjunto

- Nâo existe uma maneira de modificar elementos em um conjunto. O que pode ser feito é a exclusão de um elemento, seguida da inserção de outro elemento

### 6. Como criar dicionários
"""

# Criando dicionários vazios
dic_vazio1 = {}
dic_vazio2 = dict()

# Visualizando o tipo de dic_vazio1
type(dic_vazio1)

# Verificando se dic_vazio2 é uma instância de dict
isinstance(dic_vazio2, dict)

# Criando dicionários com pares chave/valor

# Dicionário de estados: chave é a sigla do estado e valor é o nome completo
dic_estados = { "MG":"Minas Gerais", "PR": "Paraná", "BA": "Bahia", "RN": "Rio Grande do Norte", "AM": "Amzonas"}
# Obs: o nome do estado Amazonas foi digitado errado de forma intencional
dic_estados
# OBS: Perceba que as chaves são adicionadas em ordem crescente

# Dicionário de produtos: chave é o código e valor é a descrição do produto
dic_produtos = {1215:"Lápis", 3221:"Caneta", 2329:"Borracha", 1092:"Caderno", 7633:"Cola"}
dic_produtos

# Dicionário de alunos: chave é o nome e valor é uma lista com 3 notas do aluno
dic_notas_alunos = {"João":[30, 12, 21], "Maria": [20, 30, 29], "José": [20, 23, 19]}
dic_notas_alunos

# Dicionário de alunos 2: chave é o nome e valor é um outro dicionário contendo as 3 notas do aluno
dic_notas_alunos2 = {"João": {"nota1": 30, "nota2": 12, "nota3": 21}, 
                     "Maria": {"nota1": 20, "nota2": 30, "nota3": 29}, 
                     "José": {"nota1": 20, "nota2": 23, "nota3": 19}, 
                    }
dic_notas_alunos2

"""### 7. Acessando um valor em um dicionário através de uma chave"""

dic_estados

# Acessando o valor associado à chave "PR"
dic_estados["PR"]

# Acessando o valor associado à chave "MG" dentro de um comando print
print("Eu nasci em "+ dic_estados["MG"] + ".")

# Se a chave não existir, é retornado um erro
dic_estados["XYZ"]

# Acessando o valor associado à chave 2329
dic_produtos[2329]

dic_notas_alunos

# Acessando o valor associado à chave "Maria" no dicionário dic_notas_aluno
nome_aluno = "Maria"
print("As notas de "+nome_aluno+" foram: "+str(dic_notas_alunos[nome_aluno])+".")
#print("As notas de ", nome_aluno, " foram: ", dic_notas_alunos[nome_aluno])

print(nome_aluno+" tirou "+str(dic_notas_alunos[nome_aluno][0])+" pontos na 1a prova.")

dic_notas_alunos2

# Acessando a nota da primeira prova do João no dicionário dic_notas_alunos2
dic_notas_alunos2["João"]["nota1"]